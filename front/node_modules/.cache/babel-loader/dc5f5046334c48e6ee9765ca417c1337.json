{"ast":null,"code":"import _classCallCheck from \"/mnt/d/20160745/github/gadgetProj/front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/mnt/d/20160745/github/gadgetProj/front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/mnt/d/20160745/github/gadgetProj/front/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/mnt/d/20160745/github/gadgetProj/front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/mnt/d/20160745/github/gadgetProj/front/node_modules/@babel/runtime/helpers/esm/inherits\";\n\n/*eslint no-unused-vars: 0*/\nimport FabricCanvasTool from './fabrictool';\n\nvar fabric = require('fabric').fabric;\n\nvar Pan =\n/*#__PURE__*/\nfunction (_FabricCanvasTool) {\n  _inherits(Pan, _FabricCanvasTool);\n\n  function Pan() {\n    _classCallCheck(this, Pan);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Pan).apply(this, arguments));\n  }\n\n  _createClass(Pan, [{\n    key: \"configureCanvas\",\n    value: function configureCanvas(props) {\n      var canvas = this._canvas;\n      canvas.isDrawingMode = canvas.selection = false;\n      canvas.forEachObject(function (o) {\n        return o.selectable = o.evented = false;\n      }); //Change the cursor to the move grabber\n\n      canvas.defaultCursor = 'move';\n    }\n  }, {\n    key: \"doMouseDown\",\n    value: function doMouseDown(o) {\n      var canvas = this._canvas;\n      this.isDown = true;\n      var pointer = canvas.getPointer(o.e);\n      this.startX = pointer.x;\n      this.startY = pointer.y;\n    }\n  }, {\n    key: \"doMouseMove\",\n    value: function doMouseMove(o) {\n      if (!this.isDown) return;\n      var canvas = this._canvas;\n      var pointer = canvas.getPointer(o.e);\n      canvas.relativePan({\n        x: pointer.x - this.startX,\n        y: pointer.y - this.startY\n      });\n      canvas.renderAll();\n    }\n  }, {\n    key: \"doMouseUp\",\n    value: function doMouseUp(o) {\n      this.isDown = false;\n    }\n  }]);\n\n  return Pan;\n}(FabricCanvasTool);\n\nexport default Pan;","map":{"version":3,"sources":["/mnt/d/20160745/github/gadgetProj/front/src/components/react-sketch/pan.js"],"names":["FabricCanvasTool","fabric","require","Pan","props","canvas","_canvas","isDrawingMode","selection","forEachObject","o","selectable","evented","defaultCursor","isDown","pointer","getPointer","e","startX","x","startY","y","relativePan","renderAll"],"mappings":";;;;;;AAAA;AAEA,OAAOA,gBAAP,MAA6B,cAA7B;;AAEA,IAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,MAAjC;;IAEME,G;;;;;;;;;;;;;oCAEYC,K,EAAO;AACrB,UAAIC,MAAM,GAAG,KAAKC,OAAlB;AACAD,MAAAA,MAAM,CAACE,aAAP,GAAuBF,MAAM,CAACG,SAAP,GAAmB,KAA1C;AACAH,MAAAA,MAAM,CAACI,aAAP,CAAqB,UAACC,CAAD;AAAA,eAAOA,CAAC,CAACC,UAAF,GAAeD,CAAC,CAACE,OAAF,GAAY,KAAlC;AAAA,OAArB,EAHqB,CAIrB;;AACAP,MAAAA,MAAM,CAACQ,aAAP,GAAuB,MAAvB;AACD;;;gCAEWH,C,EAAG;AACb,UAAIL,MAAM,GAAG,KAAKC,OAAlB;AACA,WAAKQ,MAAL,GAAc,IAAd;AACA,UAAIC,OAAO,GAAGV,MAAM,CAACW,UAAP,CAAkBN,CAAC,CAACO,CAApB,CAAd;AACA,WAAKC,MAAL,GAAcH,OAAO,CAACI,CAAtB;AACA,WAAKC,MAAL,GAAcL,OAAO,CAACM,CAAtB;AACD;;;gCAEWX,C,EAAG;AACb,UAAI,CAAC,KAAKI,MAAV,EAAkB;AAClB,UAAIT,MAAM,GAAG,KAAKC,OAAlB;AACA,UAAIS,OAAO,GAAGV,MAAM,CAACW,UAAP,CAAkBN,CAAC,CAACO,CAApB,CAAd;AAEAZ,MAAAA,MAAM,CAACiB,WAAP,CAAmB;AACjBH,QAAAA,CAAC,EAAEJ,OAAO,CAACI,CAAR,GAAY,KAAKD,MADH;AAEjBG,QAAAA,CAAC,EAAEN,OAAO,CAACM,CAAR,GAAY,KAAKD;AAFH,OAAnB;AAIAf,MAAAA,MAAM,CAACkB,SAAP;AACD;;;8BAESb,C,EAAG;AACX,WAAKI,MAAL,GAAc,KAAd;AACD;;;;EAhCed,gB;;AAoClB,eAAeG,GAAf","sourcesContent":["/*eslint no-unused-vars: 0*/\n\nimport FabricCanvasTool from './fabrictool'\n\nconst fabric = require('fabric').fabric;\n\nclass Pan extends FabricCanvasTool {\n\n  configureCanvas(props) {\n    let canvas = this._canvas;\n    canvas.isDrawingMode = canvas.selection = false;\n    canvas.forEachObject((o) => o.selectable = o.evented = false);\n    //Change the cursor to the move grabber\n    canvas.defaultCursor = 'move';\n  }\n\n  doMouseDown(o) {\n    let canvas = this._canvas;\n    this.isDown = true;\n    let pointer = canvas.getPointer(o.e);\n    this.startX = pointer.x;\n    this.startY = pointer.y;\n  }\n\n  doMouseMove(o) {\n    if (!this.isDown) return;\n    let canvas = this._canvas;\n    let pointer = canvas.getPointer(o.e);\n\n    canvas.relativePan({\n      x: pointer.x - this.startX,\n      y: pointer.y - this.startY\n    });\n    canvas.renderAll();\n  }\n\n  doMouseUp(o) {\n    this.isDown = false;\n  }\n\n}\n\nexport default Pan;"]},"metadata":{},"sourceType":"module"}