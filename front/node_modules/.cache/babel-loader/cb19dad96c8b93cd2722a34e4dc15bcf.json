{"ast":null,"code":"/**\n * Determine the mouse position\n *\n * @param event the canvas event\n * @returns *[] tuple of position x,y\n * @private\n */\nexport var pointerPosition = function pointerPosition(event) {\n  event = event || window.event;\n\n  var target = event.target || event.srcElement,\n      style = target.currentStyle || window.getComputedStyle(target, null),\n      borderLeftWidth = parseInt(style['borderLeftWidth'], 10),\n      borderTopWidth = parseInt(style['borderTopWidth'], 10),\n      rect = target.getBoundingClientRect(),\n      _x = event.clientX - borderLeftWidth - rect.left,\n      _y = event.clientY - borderTopWidth - rect.top,\n      _touchX = event.changedTouches ? event.changedTouches[0].clientX - borderLeftWidth - rect.left : null,\n      _touchY = event.changedTouches ? event.changedTouches[0].clientY - borderTopWidth - rect.top : null;\n\n  return [_x || _touchX, _y || _touchY];\n};\n/**\n * Calculate the distance of two x,y points\n *\n * @param point1 an object with x,y attributes representing the start point\n * @param point2 an object with x,y attributes representing the end point\n *\n * @returns {number}\n */\n\nexport var linearDistance = function linearDistance(point1, point2) {\n  var xs = point2.x - point1.x;\n  var ys = point2.y - point1.y;\n  return Math.sqrt(xs * xs + ys * ys);\n};\n/**\n * Return a random uuid of the form xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\n * @returns {string}\n */\n\nexport var uuid4 = function uuid4() {\n  var uuid = '',\n      ii;\n\n  for (ii = 0; ii < 32; ii += 1) {\n    switch (ii) {\n      case 8:\n      case 20:\n        uuid += '-';\n        uuid += (Math.random() * 16 | 0).toString(16);\n        break;\n\n      case 12:\n        uuid += '-';\n        uuid += '4';\n        break;\n\n      case 16:\n        uuid += '-';\n        uuid += (Math.random() * 4 | 8).toString(16);\n        break;\n\n      default:\n        uuid += (Math.random() * 16 | 0).toString(16);\n    }\n  }\n\n  return uuid;\n};","map":{"version":3,"sources":["/mnt/d/20160745/github/gadgetProj/front/src/components/react-sketch/utils.js"],"names":["pointerPosition","event","window","target","srcElement","style","currentStyle","getComputedStyle","borderLeftWidth","parseInt","borderTopWidth","rect","getBoundingClientRect","_x","clientX","left","_y","clientY","top","_touchX","changedTouches","_touchY","linearDistance","point1","point2","xs","x","ys","y","Math","sqrt","uuid4","uuid","ii","random","toString"],"mappings":"AAAA;;;;;;;AAOA,OAAO,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AACxCA,EAAAA,KAAK,GAAGA,KAAK,IAAIC,MAAM,CAACD,KAAxB;;AACA,MAAIE,MAAM,GAAGF,KAAK,CAACE,MAAN,IAAgBF,KAAK,CAACG,UAAnC;AAAA,MACEC,KAAK,GAAGF,MAAM,CAACG,YAAP,IAAuBJ,MAAM,CAACK,gBAAP,CAAwBJ,MAAxB,EAAgC,IAAhC,CADjC;AAAA,MAEEK,eAAe,GAAGC,QAAQ,CAACJ,KAAK,CAAC,iBAAD,CAAN,EAA2B,EAA3B,CAF5B;AAAA,MAGEK,cAAc,GAAGD,QAAQ,CAACJ,KAAK,CAAC,gBAAD,CAAN,EAA0B,EAA1B,CAH3B;AAAA,MAIEM,IAAI,GAAGR,MAAM,CAACS,qBAAP,EAJT;AAAA,MAKEC,EAAE,GAAGZ,KAAK,CAACa,OAAN,GAAgBN,eAAhB,GAAkCG,IAAI,CAACI,IAL9C;AAAA,MAMEC,EAAE,GAAGf,KAAK,CAACgB,OAAN,GAAgBP,cAAhB,GAAiCC,IAAI,CAACO,GAN7C;AAAA,MAOEC,OAAO,GAAGlB,KAAK,CAACmB,cAAN,GAAuBnB,KAAK,CAACmB,cAAN,CAAqB,CAArB,EAAwBN,OAAxB,GAAkCN,eAAlC,GAAoDG,IAAI,CAACI,IAAhF,GAAuF,IAPnG;AAAA,MAQEM,OAAO,GAAGpB,KAAK,CAACmB,cAAN,GAAuBnB,KAAK,CAACmB,cAAN,CAAqB,CAArB,EAAwBH,OAAxB,GAAkCP,cAAlC,GAAmDC,IAAI,CAACO,GAA/E,GAAqF,IARjG;;AASA,SAAO,CAAEL,EAAE,IAAIM,OAAR,EAAmBH,EAAE,IAAIK,OAAzB,CAAP;AACD,CAZM;AAcP;;;;;;;;;AAQA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,MAAD,EAASC,MAAT,EAAoB;AAChD,MAAIC,EAAE,GAAGD,MAAM,CAACE,CAAP,GAAWH,MAAM,CAACG,CAA3B;AACA,MAAIC,EAAE,GAAGH,MAAM,CAACI,CAAP,GAAWL,MAAM,CAACK,CAA3B;AACA,SAAOC,IAAI,CAACC,IAAL,CAAUL,EAAE,GAAGA,EAAL,GAAUE,EAAE,GAAGA,EAAzB,CAAP;AACD,CAJM;AAMP;;;;;AAIA,OAAO,IAAMI,KAAK,GAAG,SAARA,KAAQ,GAAM;AACzB,MAAIC,IAAI,GAAG,EAAX;AAAA,MAAeC,EAAf;;AACA,OAAKA,EAAE,GAAG,CAAV,EAAaA,EAAE,GAAG,EAAlB,EAAsBA,EAAE,IAAI,CAA5B,EAA+B;AAC7B,YAAQA,EAAR;AACE,WAAK,CAAL;AACA,WAAK,EAAL;AACED,QAAAA,IAAI,IAAI,GAAR;AACAA,QAAAA,IAAI,IAAI,CAACH,IAAI,CAACK,MAAL,KAAgB,EAAhB,GAAqB,CAAtB,EAAyBC,QAAzB,CAAkC,EAAlC,CAAR;AACA;;AACF,WAAK,EAAL;AACEH,QAAAA,IAAI,IAAI,GAAR;AACAA,QAAAA,IAAI,IAAI,GAAR;AACA;;AACF,WAAK,EAAL;AACEA,QAAAA,IAAI,IAAI,GAAR;AACAA,QAAAA,IAAI,IAAI,CAACH,IAAI,CAACK,MAAL,KAAgB,CAAhB,GAAoB,CAArB,EAAwBC,QAAxB,CAAiC,EAAjC,CAAR;AACA;;AACF;AACEH,QAAAA,IAAI,IAAI,CAACH,IAAI,CAACK,MAAL,KAAgB,EAAhB,GAAqB,CAAtB,EAAyBC,QAAzB,CAAkC,EAAlC,CAAR;AAfJ;AAiBD;;AACD,SAAOH,IAAP;AACD,CAtBM","sourcesContent":["/**\n * Determine the mouse position\n *\n * @param event the canvas event\n * @returns *[] tuple of position x,y\n * @private\n */\nexport const pointerPosition = (event) => {\n  event = event || window.event;\n  var target = event.target || event.srcElement,\n    style = target.currentStyle || window.getComputedStyle(target, null),\n    borderLeftWidth = parseInt(style['borderLeftWidth'], 10),\n    borderTopWidth = parseInt(style['borderTopWidth'], 10),\n    rect = target.getBoundingClientRect(),\n    _x = event.clientX - borderLeftWidth - rect.left,\n    _y = event.clientY - borderTopWidth - rect.top,\n    _touchX = event.changedTouches ? event.changedTouches[0].clientX - borderLeftWidth - rect.left : null,\n    _touchY = event.changedTouches ? event.changedTouches[0].clientY - borderTopWidth - rect.top : null;\n  return [(_x || _touchX), (_y || _touchY)];\n};\n\n/**\n * Calculate the distance of two x,y points\n *\n * @param point1 an object with x,y attributes representing the start point\n * @param point2 an object with x,y attributes representing the end point\n *\n * @returns {number}\n */\nexport const linearDistance = (point1, point2) => {\n  let xs = point2.x - point1.x;\n  let ys = point2.y - point1.y;\n  return Math.sqrt(xs * xs + ys * ys);\n};\n\n/**\n * Return a random uuid of the form xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\n * @returns {string}\n */\nexport const uuid4 = () => {\n  let uuid = '', ii;\n  for (ii = 0; ii < 32; ii += 1) {\n    switch (ii) {\n      case 8:\n      case 20:\n        uuid += '-';\n        uuid += (Math.random() * 16 | 0).toString(16);\n        break;\n      case 12:\n        uuid += '-';\n        uuid += '4';\n        break;\n      case 16:\n        uuid += '-';\n        uuid += (Math.random() * 4 | 8).toString(16);\n        break;\n      default:\n        uuid += (Math.random() * 16 | 0).toString(16);\n    }\n  }\n  return uuid;\n};"]},"metadata":{},"sourceType":"module"}