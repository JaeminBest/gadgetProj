{"ast":null,"code":"import _classCallCheck from \"/mnt/d/20160745/github/gadgetProj/front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/mnt/d/20160745/github/gadgetProj/front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/mnt/d/20160745/github/gadgetProj/front/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/mnt/d/20160745/github/gadgetProj/front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/mnt/d/20160745/github/gadgetProj/front/node_modules/@babel/runtime/helpers/esm/inherits\";\n\n/*eslint no-unused-vars: 0*/\nimport FabricCanvasTool from './fabrictool';\nimport { linearDistance } from './utils';\n\nvar fabric = require('fabric').fabric;\n\nvar Circle =\n/*#__PURE__*/\nfunction (_FabricCanvasTool) {\n  _inherits(Circle, _FabricCanvasTool);\n\n  function Circle() {\n    _classCallCheck(this, Circle);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Circle).apply(this, arguments));\n  }\n\n  _createClass(Circle, [{\n    key: \"configureCanvas\",\n    value: function configureCanvas(props) {\n      var canvas = this._canvas;\n      canvas.isDrawingMode = canvas.selection = false;\n      canvas.forEachObject(function (o) {\n        return o.selectable = o.evented = false;\n      });\n      this._width = props.lineWidth;\n      this._color = props.lineColor;\n      this._fill = props.fillColor;\n    }\n  }, {\n    key: \"doMouseDown\",\n    value: function doMouseDown(o) {\n      var canvas = this._canvas;\n      this.isDown = true;\n      var pointer = canvas.getPointer(o.e);\n      var _ref = [pointer.x, pointer.y];\n      this.startX = _ref[0];\n      this.startY = _ref[1];\n      this.circle = new fabric.Circle({\n        left: this.startX,\n        top: this.startY,\n        originX: 'left',\n        originY: 'center',\n        strokeWidth: this._width,\n        stroke: this._color,\n        fill: this._fill,\n        selectable: false,\n        evented: false,\n        radius: 1\n      });\n      canvas.add(this.circle);\n    }\n  }, {\n    key: \"doMouseMove\",\n    value: function doMouseMove(o) {\n      if (!this.isDown) return;\n      var canvas = this._canvas;\n      var pointer = canvas.getPointer(o.e);\n      this.circle.set({\n        radius: linearDistance({\n          x: this.startX,\n          y: this.startY\n        }, {\n          x: pointer.x,\n          y: pointer.y\n        }) / 2,\n        angle: Math.atan2(pointer.y - this.startY, pointer.x - this.startX) * 180 / Math.PI\n      });\n      this.circle.setCoords();\n      canvas.renderAll();\n    }\n  }, {\n    key: \"doMouseUp\",\n    value: function doMouseUp(o) {\n      this.isDown = false;\n    }\n  }]);\n\n  return Circle;\n}(FabricCanvasTool);\n\nexport default Circle;","map":{"version":3,"sources":["/mnt/d/20160745/github/gadgetProj/front/src/components/react-sketch/circle.js"],"names":["FabricCanvasTool","linearDistance","fabric","require","Circle","props","canvas","_canvas","isDrawingMode","selection","forEachObject","o","selectable","evented","_width","lineWidth","_color","lineColor","_fill","fillColor","isDown","pointer","getPointer","e","x","y","startX","startY","circle","left","top","originX","originY","strokeWidth","stroke","fill","radius","add","set","angle","Math","atan2","PI","setCoords","renderAll"],"mappings":";;;;;;AAAA;AAEA,OAAOA,gBAAP,MAA6B,cAA7B;AACA,SAAQC,cAAR,QAA6B,SAA7B;;AAEA,IAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBD,MAAjC;;IAEME,M;;;;;;;;;;;;;oCAEYC,K,EAAO;AACrB,UAAIC,MAAM,GAAG,KAAKC,OAAlB;AACAD,MAAAA,MAAM,CAACE,aAAP,GAAuBF,MAAM,CAACG,SAAP,GAAmB,KAA1C;AACAH,MAAAA,MAAM,CAACI,aAAP,CAAqB,UAACC,CAAD;AAAA,eAAOA,CAAC,CAACC,UAAF,GAAeD,CAAC,CAACE,OAAF,GAAY,KAAlC;AAAA,OAArB;AACA,WAAKC,MAAL,GAAcT,KAAK,CAACU,SAApB;AACA,WAAKC,MAAL,GAAcX,KAAK,CAACY,SAApB;AACA,WAAKC,KAAL,GAAab,KAAK,CAACc,SAAnB;AACD;;;gCAEWR,C,EAAG;AACb,UAAIL,MAAM,GAAG,KAAKC,OAAlB;AACA,WAAKa,MAAL,GAAc,IAAd;AACA,UAAIC,OAAO,GAAGf,MAAM,CAACgB,UAAP,CAAkBX,CAAC,CAACY,CAApB,CAAd;AAHa,iBAIgB,CAACF,OAAO,CAACG,CAAT,EAAYH,OAAO,CAACI,CAApB,CAJhB;AAIZ,WAAKC,MAJO;AAIC,WAAKC,MAJN;AAKb,WAAKC,MAAL,GAAc,IAAI1B,MAAM,CAACE,MAAX,CAAkB;AAC9ByB,QAAAA,IAAI,EAAE,KAAKH,MADmB;AACXI,QAAAA,GAAG,EAAE,KAAKH,MADC;AAE9BI,QAAAA,OAAO,EAAE,MAFqB;AAEbC,QAAAA,OAAO,EAAE,QAFI;AAG9BC,QAAAA,WAAW,EAAE,KAAKnB,MAHY;AAI9BoB,QAAAA,MAAM,EAAE,KAAKlB,MAJiB;AAK9BmB,QAAAA,IAAI,EAAE,KAAKjB,KALmB;AAM9BN,QAAAA,UAAU,EAAE,KANkB;AAO9BC,QAAAA,OAAO,EAAE,KAPqB;AAQ9BuB,QAAAA,MAAM,EAAE;AARsB,OAAlB,CAAd;AAUA9B,MAAAA,MAAM,CAAC+B,GAAP,CAAW,KAAKT,MAAhB;AACD;;;gCAEWjB,C,EAAG;AACb,UAAI,CAAC,KAAKS,MAAV,EAAkB;AAClB,UAAId,MAAM,GAAG,KAAKC,OAAlB;AACA,UAAIc,OAAO,GAAGf,MAAM,CAACgB,UAAP,CAAkBX,CAAC,CAACY,CAApB,CAAd;AACA,WAAKK,MAAL,CAAYU,GAAZ,CAAgB;AACdF,QAAAA,MAAM,EAAEnC,cAAc,CAAC;AAAEuB,UAAAA,CAAC,EAAE,KAAKE,MAAV;AAAkBD,UAAAA,CAAC,EAAE,KAAKE;AAA1B,SAAD,EAAqC;AAAEH,UAAAA,CAAC,EAAEH,OAAO,CAACG,CAAb;AAAgBC,UAAAA,CAAC,EAAEJ,OAAO,CAACI;AAA3B,SAArC,CAAd,GAAqF,CAD/E;AAEdc,QAAAA,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAWpB,OAAO,CAACI,CAAR,GAAY,KAAKE,MAA5B,EAAoCN,OAAO,CAACG,CAAR,GAAY,KAAKE,MAArD,IAA+D,GAA/D,GAAqEc,IAAI,CAACE;AAFnE,OAAhB;AAIA,WAAKd,MAAL,CAAYe,SAAZ;AACArC,MAAAA,MAAM,CAACsC,SAAP;AACD;;;8BAESjC,C,EAAG;AACX,WAAKS,MAAL,GAAc,KAAd;AACD;;;;EA3CkBpB,gB;;AA8CrB,eAAeI,MAAf","sourcesContent":["/*eslint no-unused-vars: 0*/\n\nimport FabricCanvasTool from './fabrictool'\nimport {linearDistance} from './utils';\n\nconst fabric = require('fabric').fabric;\n\nclass Circle extends FabricCanvasTool {\n\n  configureCanvas(props) {\n    let canvas = this._canvas;\n    canvas.isDrawingMode = canvas.selection = false;\n    canvas.forEachObject((o) => o.selectable = o.evented = false);\n    this._width = props.lineWidth;\n    this._color = props.lineColor;\n    this._fill = props.fillColor;\n  }\n\n  doMouseDown(o) {\n    let canvas = this._canvas;\n    this.isDown = true;\n    let pointer = canvas.getPointer(o.e);\n    [this.startX, this.startY] = [pointer.x, pointer.y];\n    this.circle = new fabric.Circle({\n      left: this.startX, top: this.startY,\n      originX: 'left', originY: 'center',\n      strokeWidth: this._width,\n      stroke: this._color,\n      fill: this._fill,\n      selectable: false,\n      evented: false,\n      radius: 1\n    });\n    canvas.add(this.circle);\n  }\n\n  doMouseMove(o) {\n    if (!this.isDown) return;\n    let canvas = this._canvas;\n    let pointer = canvas.getPointer(o.e);\n    this.circle.set({\n      radius: linearDistance({ x: this.startX, y: this.startY }, { x: pointer.x, y: pointer.y }) / 2,\n      angle: Math.atan2(pointer.y - this.startY, pointer.x - this.startX) * 180 / Math.PI\n    });\n    this.circle.setCoords();\n    canvas.renderAll();\n  }\n\n  doMouseUp(o) {\n    this.isDown = false;\n  }\n}\n\nexport default Circle;"]},"metadata":{},"sourceType":"module"}